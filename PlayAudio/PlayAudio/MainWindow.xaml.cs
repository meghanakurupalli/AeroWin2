using System;
using System.Threading;
using System.Collections.Generic;
using System.Windows;
using NAudio.Wave;
using System.Windows.Media;
using System.Windows.Shapes;
using System.IO;
using System.Diagnostics;
using System.Media;
using System.Windows.Media.Animation;
using System.Windows.Controls;
using System.Windows.Threading;

namespace play_audio
{
    /// <summary>
    /// Interaction logic for MainWindow.xaml
    /// </summary>
    public partial class MainWindow : Window
    {
        // public ChartValues<Polyline> PolylineCollection;
        string generatedWaveFilesPath = System.Configuration.ConfigurationManager.AppSettings["GeneratedWaveFilesPath"];
        public MainWindow()
        {
            InitializeComponent();

           // StartRecording(5);
            playaudio.IsEnabled = true;
            
            
        }

       

        //public static void ThreadToRunTheCursor()
        //{
        //    Dispatcher.Invoke(() =>
        //    {
        //        // Set property or change UI compomponents.              
        //    });
        //}

        WaveFileReader wfr;
        WaveOut wo;

        Polyline pl;
        Line line;


        double canH = 0;
        double canW = 0;
        double plH = 0;
        double plW = 0;
        int time = 0;
        double seconds = 0;
        int numtodisplay = 2205; //No of samples displayed in a second

        public float[] getCoefficients()
        {
            string[] lines = System.IO.File.ReadAllLines(@"D:\GIT\AeroWin2\AudioUse\coefficients.txt");


            string[] coefficients = new string[10];
            float[] coefficients1 = new float[10];
            foreach (string line in lines)
            {
                coefficients = line.Split(new char[] { ',' });

            }

            for (int i = 0; i < coefficients.Length; i++)
            {
                coefficients1[i] = float.Parse(coefficients[i]);
            }
            
            return (coefficients1);

        }


        

        private void playaudio_Click(object sender, RoutedEventArgs e)
        {
            playaudio.IsEnabled = false;
            float[] coefficients = new float[10];
            float[] a = new float[5];
            float[] b = new float[5];
            Queue<float> displaypoint = new Queue<float>();
           

            canH = waveCanvas.Height;
            canW = waveCanvas.Width;

            pl = new Polyline();
            pl.Stroke = Brushes.Black;
            pl.Name = "waveform";
            pl.StrokeThickness = 1;
            pl.MaxHeight = canH - 4;
            pl.MaxWidth = canW - 4;
            plH = pl.MaxHeight;
            plW = pl.MaxWidth;

            line = new Line();
            line.Stroke = Brushes.Black;

            line.X1 = 300;
            line.X2 = 300;
            line.Y1 = 0;
            line.Y2 = canH;
            line.Visibility = Visibility.Visible;
            line.Name = "theLine";

            line.StrokeThickness = 2;
           // waveCanvas.Children.Add(line);
            //Debug.Print("Line added to wave canvas");
            anotherLine.X1 = 20;
            anotherLine.X2 = 20;
            anotherLine.Y1 = 0;
            anotherLine.Y2 = canH;
            anotherLine.Visibility = Visibility.Visible;

            var wout = new WaveOut();
           
            wfr = new WaveFileReader(generatedWaveFilesPath + @"\record4.wav");

            DispatcherTimer timer = new DispatcherTimer();
            timer.Interval = TimeSpan.FromMilliseconds(1);
            timer.Tick += Timer_Tick;

            SoundPlayer s = new SoundPlayer(generatedWaveFilesPath + @"\record4.wav");
            


            Debug.Print("wfr format : " + wfr.WaveFormat.SampleRate);
            
           

            byte[] allBytes = File.ReadAllBytes(generatedWaveFilesPath + @"\record4.wav");
            //Debug.Print("allBytes length : " + allBytes.Length);

            double secondsRecorded = (double)(1.0 * wfr.Length / wfr.WaveFormat.AverageBytesPerSecond * 1.0);
            

            byte[] points = new byte[4];


            for (int i = 44; i < allBytes.Length - 4; i += 100)
            {
                points[2] = allBytes[i];
                points[3] = allBytes[i + 1];
                points[1] = allBytes[i + 2];
                points[0] = allBytes[i + 3];

                displaypoint.Enqueue(BitConverter.ToInt32(points, 0));

            }


            
            float[] points2 = displaypoint.ToArray();
            float[] points3 = displaypoint.ToArray();

            coefficients = getCoefficients();
            for (int i = 0; i < 5; i++)
            {
                a[i] = coefficients[i];

            }
            for (int i = 5; i < coefficients.Length; i++)
            {
                b[i - 5] = coefficients[i];

            }

            for (Int32 x = 4; x < points2.Length; x++)
            {
                //coefficients from file generated by MATLAB
                points3[x] = ((b[0] * x) + (b[1] * (x - 1)) + (b[2] * (x - 2)) + (b[3] * (x - 3)) + (b[4] * (x - 4)) + (a[1] * points2[x - 1]) + (a[2] * points2[x - 2]) + (a[3] * points2[x - 3]) + (a[4] * points2[x - 4]));

            }




            for (Int32 x = 0; x < points3.Length; ++x)
            {
                
                pl.Points.Add(Normalize(x, points3[x]));
               

            }

            this.waveCanvas.Children.Add(pl);

            s.Load();
            timer.Start();
            s.Play();
            //int samples_in_5_seconds = 100;//20000
            //line.X1 = 0;
            //line.Y1 = 0;
            //line.X2 = 0;
            //line.Y2 = canH;
            //line.Visibility = System.Windows.Visibility.Visible;

            //while (line.X1 < 681.4357)
            //{
            //    line.X1 = line.X1 + 681.4357 / 700;
            //    Debug.Print("line.X1  : " + line.X1);
            //    line.X2 = line.X2 + 681.4357 / 700;
            //    line.Y1 = 0;
            //    line.Y2 = canH;
            //    //System.Threading.Thread.Sleep(1);
            //    this.waveCanvas.Children.Add(line);
            //    Debug.Print("Here too");


            //    //System.Threading.Thread.Sleep(1000);
            //    waveCanvas.Children.Remove(line);

            //}


            //anotherLine.Y1 = 0;
            //anotherLine.Y2 = canH;
            //while (anotherLine.X1 < 681.4357)
            //{
            //    anotherLine.X1 = anotherLine.X1 + 681.4357 / 700;
            //    Debug.Print("line.X1  : " + anotherLine.X1);
            //    anotherLine.X2 = anotherLine.X1;
            //    Debug.Print("Here too");
            //    //System.Threading.Thread.Sleep(1000);
            //}

            /*
            DoubleAnimation myDoubleAnimation = new DoubleAnimation();
            myDoubleAnimation.From = 0;
            myDoubleAnimation.To = 600;
            myDoubleAnimation.Duration =
                new Duration(TimeSpan.FromSeconds(5));
             myDoubleAnimation.AutoReverse = true;
             myDoubleAnimation.RepeatBehavior = RepeatBehavior.Forever;

            Storyboard.SetTarget(myDoubleAnimation, anotherLine);
            // Storyboard.SetTarget(myDoubleAnimation, "{Binding ElementName = anotherLine}")
            Storyboard.SetTargetProperty(myDoubleAnimation,
                new PropertyPath(Canvas.LeftProperty));
            Storyboard myStoryboard = new Storyboard();
            myStoryboard.Children.Add(myDoubleAnimation);
            myStoryboard.Begin(anotherLine);
            Debug.Print("Here!!");
            // this.waveCanvas.Children.Add(line);

            */


        }

        private void Timer_Tick(object sender, EventArgs e)
        {
            // throw new NotImplementedException();
            if (anotherLine.X1 < 681.4357)
            {
                anotherLine.X1 = anotherLine.X1 + 1;
                Debug.Print("line.X1  : " + anotherLine.X1);
                anotherLine.X2 = anotherLine.X1;
                Debug.Print("Here too");
                anotherLine.Visibility = Visibility.Visible;
            }
        }

        private void OnPlaybackStopped(object sender, StoppedEventArgs e)
        {
            // throw new NotImplementedException();
            Debug.Print("On playback stopped event handler");
        }

        Point Normalize(Int32 x, float y)
        {
            Point p = new Point
            {

                X = 1.99 * x / 1800 * plW,
                Y = plH / 2.0 - y / (Math.Pow(2, 28) * 1.0) * (plH)
            };
            
            return p;
        }

        //private void playaudio_Click(object sender, RoutedEventArgs e)
        //{
        //    playaudio.IsEnabled = false;
        //    waveCanvas.Children.Clear();
                        

        //}
    }
}
